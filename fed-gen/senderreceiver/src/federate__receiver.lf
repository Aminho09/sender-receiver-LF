target C {
  cmake-include: "include/federate__receiver_extension.cmake",
  compile-definitions: {
    FEDERATED_DECENTRALIZED: "",
    EXECUTABLE_PREAMBLE: "",
    NUMBER_OF_FEDERATES: "3",
    FEDERATE_ID: "2",
    FEDERATED: "",
    LF_CLOCK_SYNC: "1",
    _LF_FEDERATE_NAMES_COMMA_SEPARATED: "\"federate__bitGenerator,federate__sender,federate__receiver\""
  },
  coordination: "decentralized",
  _fed_setup: "include/_federate__receiver_preamble.h",
  keepalive: true,
  single-threaded: false,
  timeout: 40 sec
}


NONE preamble {=
#include <stdlib.h>
typedef enum {
    STATE_A = 0, STATE_B = 1,
    STATE_C = 2, STATE_D = 3,
    STATE_E = 4, STATE_F = 5,
    STATE_G = 6, STATE_H = 7
} SenderModelState;

typedef enum {
    STATE_IDLE  = 0,
    STATE_LAST1 = 1,
    STATE_LAST0 = 2
} ReceiverModelState;

// queue_ss_t structure for Enq operation
typedef struct {
    int* items;
    int front;
    int rear;
    int capacity;
} queue_ss_t;
=}
preamble {=
#ifdef __cplusplus
extern "C" {
#endif
#include "core/federated/federate.h"
#include "core/federated/network/net_common.h"
#include "core/federated/network/net_util.h"
#include "core/federated/clock-sync.h"
#include "core/threaded/reactor_threaded.h"
#include "core/utils/util.h"
extern federate_instance_t _fed;
#ifdef __cplusplus
}
#endif


=}

reactor ReceiverModel {
  preamble {=
    // queue_ss_t operations
    queue_ss_t* createQueue_receiver(int capacity) {
        queue_ss_t* queue = (queue_ss_t*)malloc(sizeof(queue_ss_t));
        queue->items = (int*)malloc(capacity * sizeof(int));
        queue->front = 0;
        queue->rear = -1;
        queue->capacity = capacity;
        return queue;
    }

    void enqueue_receiver(queue_ss_t* queue, int value) {
        if (queue->rear < queue->capacity - 1) {
            queue->items[++queue->rear] = value;
        }
    }

    void deleteQueue_receiver(queue_ss_t* queue) {
        free(queue->items);
        free(queue);
    }

    int is_empty_receiver(queue_ss_t* queue) {
        return queue->front > queue->rear;
    }

    void printQueue_receiver(queue_ss_t* queue, const char* message) {
        if (is_empty_receiver(queue)) {
            printf("%s: Queue is empty\n", message);
            return;
        }

        printf("%s: ", message);
        for (int i = queue->front; i <= queue->rear; i++) {
            printf("%d ", queue->items[i]);
        }
        printf("\n");
    }
  =}

  input up: int
  state y: instant_t = 0
  state last_reset: instant_t = 0
  state drift: int = 100000000

  state step: time = 1 msec
  logical action a
  state currState: ReceiverModelState = 0
  state queue: queue_ss_t*

  reaction(startup) ->
  a {=
    self->queue = createQueue_receiver(10);
    lf_schedule(a, 0);
  =}

  reaction(a, up) ->
  a {=
    self->y = lf_time_physical_elapsed() - self->last_reset;
    // printf("y: %d\n", self->y);
    switch(self->currState){
        case STATE_IDLE:
            if (up->is_present){
                self->last_reset = lf_time_physical_elapsed();
                enqueue_receiver(self->queue, 1);
                self->currState = STATE_LAST1;
                printf("Receiver State: IDLE -> LAST1\n");
                // printQueue(self->queue);
            }
            break;

        case STATE_LAST1:
            if (self->y >= 9000000000 + self->drift){
                printf("Clock invariant in \"Receiver->Last1\" state violated.");
                exit(-1);
            }
            else if (up->is_present && self->y >= 3000000000 - self->drift
                        && self->y <= 5000000000 + self->drift){
                self->last_reset = lf_time_physical_elapsed();
                enqueue_receiver(self->queue, 1);
                printf("Receiver State: LAST1 -> LAST1\n");
                // printQueue(self->queue);
            }
            else if (up->is_present && self->y >= 5000000000 - self->drift
                        && self->y <= 7000000000 + self->drift){
                self->last_reset = lf_time_physical_elapsed();
                enqueue_receiver(self->queue, 0);
                printf("Receiver State: LAST1 -> LAST0\n");
                // printQueue(self->queue);
                self->currState = STATE_LAST0;
            }
            else if (up->is_present && self->y >= 7000000000 - self->drift
                        && self->y <= 9000000000 + self->drift){
                self->last_reset = lf_time_physical_elapsed();
                enqueue_receiver(self->queue, 0);
                enqueue_receiver(self->queue, 1);
                printf("Receiver State: LAST1 -> LAST1\n");
                // printQueue(self->queue);
            }
            break;

        case STATE_LAST0:
            if (self->y >= 7000000000 + self->drift){
                printf("Clock invariant in \"Receiver->Last0\" state violated.");
                exit(-1);
            }
            else if (up->is_present && self->y >= 3000000000 - self->drift
                        && self->y <= 5000000000 + self->drift){
                self->last_reset = lf_time_physical_elapsed();
                enqueue_receiver(self->queue, 0);
                printf("Receiver State: LAST0 -> LAST0\n");
                // printQueue(self->queue);
            }
            else if (up->is_present && self->y >= 5000000000 - self->drift
                        && self->y <= 7000000000 + self->drift){
                self->last_reset = lf_time_physical_elapsed();
                enqueue_receiver(self->queue, 0);
                enqueue_receiver(self->queue, 1);
                printf("Receiver State: LAST0 -> LAST1\n");
                // printQueue(self->queue);
                self->currState = STATE_LAST1;
            }
            else if (self->y >= 7000000000 - self->drift){
                self->last_reset = lf_time_physical_elapsed();
                enqueue_receiver(self->queue, 0);
                printf("Receiver State: LAST0 -> IDLE\n");
                self->currState = STATE_IDLE;
                printQueue_receiver(self->queue, "Received Queue");
            }
            break;
    }
    lf_schedule(a, self->step);
  =}

  reaction(
      shutdown) {=
    if (self->queue != NULL) {
        deleteQueue_receiver(self->queue);
    }
  =}
}
reactor _receiverup {
  input port0: int

  output[1] port: int

  port0 -> port
}
@_networkReactor("receiver")
reactor NetworkReceiver_9 {
  output msg: int

  logical action networkMessage: int

  reaction(startup) {=
    self->_lf__reaction_1.is_an_input_reaction = true;
  =}

  reaction(networkMessage) -> msg {=
    msg->physical_time_of_arrival = self->_lf__networkMessage.physical_time_of_arrival;
    msg->intended_tag = self->_lf__networkMessage.intended_tag;
    lf_set(msg, networkMessage->value);
  =}
}
@_fed_config()
main reactor  {

    receiver = new ReceiverModel()
    
    
    
    
    
    
    @_tpoLevel(4)
    nr_federate__receiver = new NetworkReceiver_9()
    _receiverup0 = new _receiverup()
    _receiverup0.port -> receiver.up
    nr_federate__receiver.msg -> _receiverup0.port0
}
