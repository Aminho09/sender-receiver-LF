target C {
  cmake-include: "include/federate__sender_extension.cmake",
  compile-definitions: {
    FEDERATED_DECENTRALIZED: "",
    EXECUTABLE_PREAMBLE: "",
    NUMBER_OF_FEDERATES: "3",
    FEDERATE_ID: "1",
    FEDERATED: "",
    LF_CLOCK_SYNC: "1",
    _LF_FEDERATE_NAMES_COMMA_SEPARATED: "\"federate__bitGenerator,federate__sender,federate__receiver\""
  },
  coordination: "decentralized",
  _fed_setup: "include/_federate__sender_preamble.h",
  keepalive: true,
  single-threaded: false,
  timeout: 40 sec
}


NONE preamble {=
#include <stdlib.h>
typedef enum {
    STATE_A = 0, STATE_B = 1,
    STATE_C = 2, STATE_D = 3,
    STATE_E = 4, STATE_F = 5,
    STATE_G = 6, STATE_H = 7
} SenderModelState;

typedef enum {
    STATE_IDLE  = 0,
    STATE_LAST1 = 1,
    STATE_LAST0 = 2
} ReceiverModelState;

// queue_ss_t structure for Enq operation
typedef struct {
    int* items;
    int front;
    int rear;
    int capacity;
} queue_ss_t;
=}
preamble {=
#ifdef __cplusplus
extern "C" {
#endif
#include "core/federated/federate.h"
#include "core/federated/network/net_common.h"
#include "core/federated/network/net_util.h"
#include "core/federated/clock-sync.h"
#include "core/threaded/reactor_threaded.h"
#include "core/utils/util.h"
extern federate_instance_t _fed;
#ifdef __cplusplus
}
#endif


=}

reactor SenderModel {
  preamble {=
    // queue_ss_t operations
    queue_ss_t* createQueue_sender(int capacity) {
        queue_ss_t* queue = (queue_ss_t*)malloc(sizeof(queue_ss_t));
        queue->items = (int*)malloc(capacity * sizeof(int));
        queue->front = 0;
        queue->rear = -1;
        queue->capacity = capacity;
        return queue;
    }

    void enqueue_sender(queue_ss_t* queue, int value) {
        if (queue->rear < queue->capacity - 1) {
            queue->items[++queue->rear] = value;
        }
    }

    int dequeue_sender(queue_ss_t* queue) {
        if (queue->front <= queue->rear) {
            return queue->items[queue->front++];
        }
        return -1;
    }

    int get_front_sender(queue_ss_t* queue) {
        if (queue->front <= queue->rear) {
            return queue->items[queue->front];
        }
        return -1;
    }

    void deleteQueue_sender(queue_ss_t* queue) {
        free(queue->items);
        free(queue);
    }

    int is_empty_sender(queue_ss_t* queue) {
        return queue->front > queue->rear;
    }
  =}

  input in: int  // State definitions using enumeration

  output up: int
  output down: int

  state sequence: int[] = {1, 0, 0, 1, 1, 0, 1, 0, 0}
  state length: int = 9

  state x: instant_t = 0
  state last_reset: instant_t = 0
  state drift: int = 100000000

  state step: time = 1 msec
  logical action a
  state currState: SenderModelState = 0
  state queue: queue_ss_t*

  reaction(
      startup) {=
    printf("SenderModel started\n");
    self->currState = STATE_A;
    self->queue = createQueue_sender(self->length);

    for (int i = 0; i < self->length; i++) {
        enqueue_sender(self->queue, self->sequence[i]);
    }
  =}

  reaction(in, a) ->
  up, down, a {=
    // Main state machine logic
    self->x = lf_time_physical_elapsed() - self->last_reset;
    // printf("x: %lld\n", self->x);
    switch(self->currState) {
        case STATE_A:
            if (self->currState == STATE_A && in->is_present) {
                printf("Received input: %d\n", in->value);
                printf("A -> B\n");
                dequeue_sender(self->queue);
                printf("Error after deq\n");
                self->currState = STATE_B;
                self->last_reset = lf_time_physical_elapsed();
                printf("Error after reset\n");
                lf_schedule(a, self->step);
                printf("Error after sched\n");
            }
            break;

        case STATE_B:
            if (self->x >= 2000000000 + self->drift){
                printf("Clock invariant in the \"Sender->B\" state violated.");
                exit(-1);
            }
            else if (self->x >= 2000000000 - self->drift
                    && get_front_sender(self->queue) == 1) {
                lf_set(up, 1);
                printf("Sender State: B -> C\n");
                dequeue_sender(self->queue);
                self->currState = STATE_C;
                self->last_reset = lf_time_physical_elapsed();
            } else if (self->x >= 2000000000 - self->drift
                    && get_front_sender(self->queue) == 0) {
                lf_set(up, 1);
                printf("Sender State: B -> D\n");
                dequeue_sender(self->queue);
                self->currState = STATE_D;
                self->last_reset = lf_time_physical_elapsed();
            }
            lf_schedule(a, self->step);
            break;

        case STATE_C:
            if (self->x >= 2000000000 + self->drift){
                printf("Clock invariant in the \"Sender->C\" state violated.");
                exit(-1);
            }
            else if (self->x >= 2000000000 - self->drift) {
                lf_set(down, 1);
                printf("Sender State: C -> B\n");
                self->currState = STATE_B;
                self->last_reset = lf_time_physical_elapsed();
            }
            lf_schedule(a, self->step);
            break;

        case STATE_D:
            if (self->x >= 4000000000 + self->drift){
                printf("Clock invariant in the \"Sender->D\" state violated.");
                exit(-1);
            }
            else if (self->x >= 4000000000 - self->drift
                    && get_front_sender(self->queue) == 1) {
                lf_set(down, 1);
                printf("Sender State: D -> E\n");
                dequeue_sender(self->queue);
                self->currState = STATE_E;
                self->last_reset = lf_time_physical_elapsed();
            } else if (self->x >= 4000000000 - self->drift
                    && get_front_sender(self->queue) == 0) {
                lf_set(down, 1);
                printf("Sender State: D -> F\n");
                dequeue_sender(self->queue);
                self->currState = STATE_F;
                self->last_reset = lf_time_physical_elapsed();
            }
            lf_schedule(a, self->step);
            break;

        case STATE_E:
            if (self->x >= 4000000000 + self->drift){
                printf("Clock invariant in the \"Sender->E\" state violated.");
                exit(-1);
            }
            else if (self->x >= 4000000000 - self->drift
                    && get_front_sender(self->queue) == 1) {
                lf_set(up, 1);
                printf("Sender State: E -> C\n");
                dequeue_sender(self->queue);
                self->currState = STATE_C;
                self->last_reset = lf_time_physical_elapsed();
            } else if (self->x >= 4000000000 - self->drift
                    && get_front_sender(self->queue) == 0) {
                lf_set(up, 1);
                printf("Sender State: E -> D\n");
                dequeue_sender(self->queue);
                self->currState = STATE_D;
                self->last_reset = lf_time_physical_elapsed();
            }
            lf_schedule(a, self->step);
            break;

        case STATE_F:
            if (self->x >= 2000000000 + self->drift){
                printf("Clock invariant in the \"Sender->F\" state violated.");
                exit(-1);
            }
            else if (self->x >= 2000000000 - self->drift) {
                lf_set(up, 1);
                printf("Sender State: F -> G\n");
                self->currState = STATE_G;
                self->last_reset = lf_time_physical_elapsed();
            }
            lf_schedule(a, self->step);
            break;

        case STATE_G:
            if (self->x >= 2000000000 + self->drift){
                printf("Clock invariant in the \"Sender->G\" state violated.");
                exit(-1);
            }
            else if (self->x >= 2000000000 - self->drift
                    && get_front_sender(self->queue) == 0) {
                lf_set(down, 1);
                printf("Sender State: G -> F\n");
                self->currState = STATE_F;
                dequeue_sender(self->queue);
                self->last_reset = lf_time_physical_elapsed();
            } else if (self->x >= 2000000000 - self->drift
                    && get_front_sender(self->queue) == 1) {
                lf_set(down, 1);
                printf("Sender State: G -> E\n");
                self->currState = STATE_E;
                dequeue_sender(self->queue);
                self->last_reset = lf_time_physical_elapsed();
            } else if (self->x >= 2000000000 - self->drift
                    && is_empty_sender(self->queue)) {
                lf_set(down, 1);
                printf("Sender State: G -> H\n");
                self->currState = STATE_H;
            }
            lf_schedule(a, self->step);
            break;

        case STATE_H:
            if (self->x >= 4000000000 + self->drift){
                printf("Clock invariant in the \"Sender->H\" state violated.");
                exit(-1);
            }
            else if (self->x >= 4000000000 - self->drift) {
                printf("Sender State: H -> A\n");
                self->currState = STATE_A;
            }
            else
                lf_schedule(a, self->step);
            break;
    }
  =}

  reaction(
      shutdown) {=
    if (self->queue != NULL) {
        deleteQueue_sender(self->queue);
    }
  =}
}
reactor _senderin {
  input port0: int

  output[1] port: int

  port0 -> port
}
@_networkReactor("receiver")
reactor NetworkReceiver_8 {
  output msg: int

  logical action networkMessage: int

  reaction(startup) {=
    self->_lf__reaction_1.is_an_input_reaction = true;
  =}

  reaction(networkMessage) -> msg {=
    msg->physical_time_of_arrival = self->_lf__networkMessage.physical_time_of_arrival;
    msg->intended_tag = self->_lf__networkMessage.intended_tag;
    lf_set(msg, networkMessage->value);
  =}
}
@_networkReactor("sender")
reactor NetworkSender_0<SENDERINDEXPARAMETER> {
  input[1] msg: int

  reaction(msg) {=
    // Sending from msg[0] in federate federate__sender to receiver.up in federate federate__receiver
    if (!msg[0]->is_present) {
    return;
    }
    size_t _lf_message_length = sizeof(int);
    lf_send_tagged_message(self->base.environment, NEVER, MSG_TYPE_P2P_TAGGED_MESSAGE, 0, 2, "federate 2", _lf_message_length, (unsigned char*)&msg[0]->value);
  =}
}
@_fed_config()
main reactor  {

    sender = new SenderModel()
    
    
    
    
    
    @_tpoLevel(3)
    ns_federate__receiver = new NetworkSender_0<{= 0 =}>()
    @_tpoLevel(2)
    nr_federate__sender = new NetworkReceiver_8()
    _senderin0 = new _senderin()
    _senderin0.port -> sender.in
    nr_federate__sender.msg -> _senderin0.port0
    sender.up -> ns_federate__receiver.msg
}
