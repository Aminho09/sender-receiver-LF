target C
// Preamble for shared definitions
preamble {=
    #include <stdlib.h>
    typedef enum {
        STATE_A = 0, STATE_B = 1,
        STATE_C = 2, STATE_D = 3,
        STATE_E = 4, STATE_F = 5,
        STATE_G = 6, STATE_H = 7
    } SenderModelState;

    typedef enum {
        STATE_IDLE  = 0,
        STATE_LAST1 = 1,
        STATE_LAST0 = 2
    } ReceiverModelState;

    // queue_ss_t structure for Enq operation
    typedef struct {
        int* items;
        int front;
        int rear;
        int capacity;
    } queue_ss_t;

    queue_ss_t* createQueue(int capacity);
    void enqueue(queue_ss_t* queue, int value);
    int dequeue(queue_ss_t* queue);
    int get_front(queue_ss_t* queue);
    void deleteQueue(queue_ss_t* queue);
    int is_empty(queue_ss_t* queue);
    void printQueue(queue_ss_t* queue, const char* message);
=}

reactor BitGenerator {
    timer inputTimer(0, 20 sec)
    state sent: int = 0
    output out: int

    reaction(inputTimer) -> out {=
        if (self->sent == 0) {
            lf_set(out, 1);
            self->sent = 1;
        }
    =}
}
reactor SenderModel {
    // State definitions using enumeration
    input in: int

    output up: int
    output down: int

    state sequence: int[] = {1, 0, 0, 1, 1, 0, 1, 0, 0}
    state length: int = 9

    state x: int = 0
    state drift: int = 100

    state step: time = 1 msec
    logical action a
    state currState: SenderModelState = 0
    state queue: queue_ss_t*

    reaction(startup) {=
        printf("SenderModel started\n");
        self->currState = STATE_A;
        self->queue = createQueue(self->length);

        for (int i = 0; i < self->length; i++) {
            enqueue(self->queue, self->sequence[i]);
        }
    =}

    reaction(in) -> a {=
        printf("Received input: %d\n", in->value);
        if (self->currState == STATE_A && in->value == 1) {
            printf("A -> B\n");
            dequeue(self->queue);
            self->currState = STATE_B;
            self->x = 1;
            lf_schedule(a, self->step);
        }
    =}

    reaction(a) -> up, down, a {=
        // Main state machine logic
        // printf("x: %d\n", self->x);
        switch(self->currState) {
            case STATE_B:
                if (self->x >= 2000 - self->drift 
                        && get_front(self->queue) == 1) {
                    lf_set(up, 1);
                    printf("Sender State: B -> C\n");
                    dequeue(self->queue);
                    self->currState = STATE_C;
                    self->x = 0;
                } else if (self->x >= 2000 - self->drift
                        && get_front(self->queue) == 0) {
                    lf_set(up, 1);
                    printf("Sender State: B -> D\n");
                    dequeue(self->queue);
                    self->currState = STATE_D;
                    self->x = 0;
                }
                lf_schedule(a, self->step);
                break;
                
            case STATE_C:
                if (self->x >= 2000 - self->drift) {
                    lf_set(down, 1);
                    printf("Sender State: C -> B\n");
                    self->currState = STATE_B;
                    self->x = 0;
                }
                lf_schedule(a, self->step);
                break;
                
            case STATE_D:
                if (self->x >= 4000 - self->drift 
                        && get_front(self->queue) == 1) {
                    lf_set(down, 1);
                    printf("Sender State: D -> E\n");
                    dequeue(self->queue);
                    self->currState = STATE_E;
                    self->x = 0;
                } else if (self->x >= 4000 - self->drift 
                        && get_front(self->queue) == 0) {
                    lf_set(down, 1);
                    printf("Sender State: D -> F\n");
                    dequeue(self->queue);
                    self->currState = STATE_F;
                    self->x = 0;
                }
                lf_schedule(a, self->step);
                break;
                
            case STATE_E:
                if (self->x >= 4000 - self->drift 
                        && get_front(self->queue) == 1) {
                    lf_set(up, 1);
                    printf("Sender State: E -> C\n");
                    dequeue(self->queue);
                    self->currState = STATE_C;
                    self->x = 0;
                } else if (self->x >= 4000 - self->drift 
                        && get_front(self->queue) == 0) {
                    lf_set(up, 1);
                    printf("Sender State: E -> D\n");
                    dequeue(self->queue);
                    self->currState = STATE_D;
                    self->x = 0;
                }
                lf_schedule(a, self->step);
                break;
                
            case STATE_F:
                if (self->x >= 2000 - self->drift) {
                    lf_set(up, 1);
                    printf("Sender State: F -> G\n");
                    self->currState = STATE_G;
                    self->x = 0;
                }
                lf_schedule(a, self->step);
                break;
                
            case STATE_G:
                if (self->x >= 2000 - self->drift 
                        && get_front(self->queue) == 0) {
                    lf_set(down, 1);
                    printf("Sender State: G -> F\n");
                    self->currState = STATE_F;
                    dequeue(self->queue);
                    self->x = 0;
                } else if (self->x >= 2000 - self->drift 
                        && get_front(self->queue) == 1) {
                    lf_set(down, 1);
                    printf("Sender State: G -> E\n");
                    self->currState = STATE_E;
                    dequeue(self->queue);
                    self->x = 0;
                } else if (self->x >= 2000 - self->drift 
                        && is_empty(self->queue)) {
                    lf_set(down, 1);
                    printf("Sender State: G -> H\n");
                    self->currState = STATE_H;
                }
                lf_schedule(a, self->step);
                break;

            case STATE_H:
                if (self->x >= 4000 - self->drift) {
                    printf("Sender State: H -> A\n");
                    self->currState = STATE_A;
                }
                else
                    lf_schedule(a, self->step);
                break;
        }
        
        // Increment time
        self->x++;
        
    =}

    reaction(shutdown) {=
        if (self->queue != NULL) {
            deleteQueue(self->queue);
        }
    =}
}

reactor ReceiverModel{

    input up: int
    state y: int = 0
    state drift: int = 100

    state step: time = 1 msec
    logical action a
    state currState: ReceiverModelState = 0
    state queue: queue_ss_t*

    reaction(startup) -> a{=
        self->queue = createQueue(10);
        lf_schedule(a, 0);
    =}

    reaction(a, up) -> a{=
        // printf("y: %d\n", self->y);
        switch(self->currState){
            case STATE_IDLE:
                if (up->is_present){
                    self->y = 0;
                    enqueue(self->queue, 1);
                    self->currState = STATE_LAST1;
                    printf("Receiver State: IDLE -> LAST1\n");
                    // printQueue(self->queue);
                }
                break;

            case STATE_LAST1:
                if (up->is_present && self->y >= 3000 - self->drift 
                            && self->y <= 5000 + self->drift){
                    self->y = 0;
                    enqueue(self->queue, 1);
                    printf("Receiver State: LAST1 -> LAST1\n");
                    // printQueue(self->queue);
                }
                else if (up->is_present && self->y >= 5000 - self->drift 
                            && self->y <= 7000 + self->drift){
                    self->y = 0;
                    enqueue(self->queue, 0);
                    printf("Receiver State: LAST1 -> LAST0\n");
                    // printQueue(self->queue);
                    self->currState = STATE_LAST0;
                }
                else if (up->is_present && self->y >= 7000 - self->drift 
                            && self->y <= 9000 + self->drift){
                    self->y = 0;
                    enqueue(self->queue, 0);
                    enqueue(self->queue, 1);
                    printf("Receiver State: LAST1 -> LAST1\n");
                    // printQueue(self->queue);
                }
                break;
            
            case STATE_LAST0:
            if (up->is_present && self->y >= 3000 - self->drift 
                            && self->y <= 5000 + self->drift){
                    self->y = 0;
                    enqueue(self->queue, 0);
                    printf("Receiver State: LAST0 -> LAST0\n");
                    // printQueue(self->queue);
                }
                else if (up->is_present && self->y >= 5000 - self->drift 
                            && self->y <= 7000 + self->drift){
                    self->y = 0;
                    enqueue(self->queue, 0);
                    enqueue(self->queue, 1);
                    printf("Receiver State: LAST0 -> LAST1\n");
                    // printQueue(self->queue);
                    self->currState = STATE_LAST1;
                }
                else if (self->y >= 7000 - self->drift){
                    self->y = 0;
                    enqueue(self->queue, 0);
                    printf("Receiver State: LAST0 -> IDLE\n");
                    self->currState = STATE_IDLE;
                    printQueue(self->queue, "Received Queue");
                }
                break;
        }

        self->y++;
        lf_schedule(a, self->step);
    =}

    reaction(shutdown) {=
        if (self->queue != NULL) {
            deleteQueue(self->queue);
        }
    =}
}


main reactor {
    preamble {=
        // queue_ss_t operations
        queue_ss_t* createQueue(int capacity) {
            queue_ss_t* queue = (queue_ss_t*)malloc(sizeof(queue_ss_t));
            queue->items = (int*)malloc(capacity * sizeof(int));
            queue->front = 0;
            queue->rear = -1;
            queue->capacity = capacity;
            return queue;
        }
        
        void enqueue(queue_ss_t* queue, int value) {
            if (queue->rear < queue->capacity - 1) {
                queue->items[++queue->rear] = value;
            }
        }

        int dequeue(queue_ss_t* queue) {
            if (queue->front <= queue->rear) {
                return queue->items[queue->front++];
            }
            return -1;
        }

        int get_front(queue_ss_t* queue) {
            if (queue->front <= queue->rear) {
                return queue->items[queue->front];
            }
            return -1;
        }
        
        void deleteQueue(queue_ss_t* queue) {
            free(queue->items);
            free(queue);
        }

        int is_empty(queue_ss_t* queue) {
            return queue->front > queue->rear;
        }

        void printQueue(queue_ss_t* queue, const char* message) {
            if (is_empty(queue)) {
                printf("%s: Queue is empty\n", message);
                return;
            }

            printf("%s: ", message);
            for (int i = queue->front; i <= queue->rear; i++) {
                printf("%d ", queue->items[i]);
            }
            printf("\n");
        }
    =}
    bitGenerator = new BitGenerator()
    sender = new SenderModel()
    receiver = new ReceiverModel()

    bitGenerator.out -> sender.in
    sender.up -> receiver.up
}